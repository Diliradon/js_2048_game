{"mappings":"A,S,E,C,C,C,E,C,A,M,G,E,E,M,A,G,C,E,E,M,A,E,I,I,E,E,E,A,M,G,E,E,I,C,C,E,C,C,C,E,C,O,C,C,S,E,C,E,O,A,S,C,E,G,M,O,C,G,O,E,E,E,I,A,S,C,E,G,A,a,O,Q,A,M,C,C,O,Q,C,E,A,M,C,C,a,C,O,M,I,C,E,E,I,A,S,C,C,C,E,G,G,G,A,U,O,E,O,E,E,G,I,E,O,S,C,Q,C,I,C,G,K,C,E,I,G,W,G,E,W,E,C,E,E,W,C,I,A,E,A,Q,G,A,Q,E,O,M,I,C,G,G,A,c,G,2C,I,C,G,O,E,E,G,E,I,A,W,M,A,U,wI,G,CCGA,IAAI,EAAQ,EAAI,MAAM,EAAa,GAAG,CAAC,WAAM,MAAA,MAAM,CAAY,IAAI,CAAC,E,GAChE,EAAQ,EACR,EAAQ,CAAA,EACN,EAAQ,SAAS,gBAAgB,CAAC,eAClC,EAAc,CAAC,YAAa,aAAc,UAAW,YAAY,CAEjE,EAAU,CACd,aAAc,SAAS,cAAc,CAAC,iBACtC,YAAa,SAAS,cAAc,CAAC,gBACrC,WAAY,SAAS,cAAc,CAAC,cACtC,EAEM,EAAS,SAAS,cAAc,CAAC,gBAEvC,EAAO,gBAAgB,CAAC,QAiBxB,WACE,AAhBF,CAAA,WACE,EAAQ,EACR,SAAS,aAAa,CAAC,eAAe,SAAS,CAAG,EAClD,EAAS,EAAG,MAAM,EAAa,GAAG,CAAC,WAAM,MAAA,MAAM,CAAY,IAAI,CAAC,E,GAEhE,IAAK,IAAI,EAAI,EAAG,EAtBC,EAsBe,IAC9B,IAAK,IAAI,EAAI,EAAG,EAvBD,EAuBiB,IACV,IAAhB,CAAK,CAAC,EAAE,CAAC,EAAE,GACb,EAAQ,WAAW,CAAC,SAAS,CAAC,GAAG,CAAC,UAClC,EAAQ,UAAU,CAAC,SAAS,CAAC,GAAG,CAAC,UAIzC,CAAA,IAmKE,EAAO,SAAS,EAAI,WACpB,EAAO,SAAS,CAAG,UACnB,EAAO,KAAK,CAAG,wDACf,EAAQ,YAAe,CAAC,SAAS,CAAC,GAAG,CAAC,UAjKtC,EAAe,GACf,EAAe,GACf,EAAS,EAAO,EAClB,GAEA,SAAS,gBAAgB,CAAC,QAAS,SAAC,CAApC,EACE,GAAI,AAAC,EAAY,QAAQ,C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","sources":["<anon>","src/scripts/main.js"],"sourcesContent":["\"use strict\";\nfunction _array_like_to_array(arr, len) {\n    if (len == null || len > arr.length) len = arr.length;\n    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];\n    return arr2;\n}\nfunction _array_without_holes(arr) {\n    if (Array.isArray(arr)) return _array_like_to_array(arr);\n}\nfunction _iterable_to_array(iter) {\n    if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}\nfunction _non_iterable_spread() {\n    throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _to_consumable_array(arr) {\n    return _array_without_holes(arr) || _iterable_to_array(arr) || _unsupported_iterable_to_array(arr) || _non_iterable_spread();\n}\nfunction _unsupported_iterable_to_array(o, minLen) {\n    if (!o) return;\n    if (typeof o === \"string\") return _array_like_to_array(o, minLen);\n    var n = Object.prototype.toString.call(o).slice(8, -1);\n    if (n === \"Object\" && o.constructor) n = o.constructor.name;\n    if (n === \"Map\" || n === \"Set\") return Array.from(n);\n    if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _array_like_to_array(o, minLen);\n}\nvar SIZE_BOARD = 4;\nvar board = _to_consumable_array(Array(SIZE_BOARD)).map(function() {\n    return Array(SIZE_BOARD).fill(0);\n});\nvar score = 0;\nvar isWin = false;\nvar cells = document.querySelectorAll(\".field-cell\");\nvar allowedKeys = [\n    \"ArrowLeft\",\n    \"ArrowRight\",\n    \"ArrowUp\",\n    \"ArrowDown\"\n];\nvar message = {\n    messageStart: document.getElementById(\"message-start\"),\n    messageLose: document.getElementById(\"message-lose\"),\n    messageWin: document.getElementById(\"message-win\")\n};\nvar button = document.getElementById(\"start-button\");\nbutton.addEventListener(\"click\", setGame);\nfunction resetGame() {\n    score = 0;\n    document.querySelector(\".game-score\").innerText = score;\n    board = _to_consumable_array(Array(SIZE_BOARD)).map(function() {\n        return Array(SIZE_BOARD).fill(0);\n    });\n    for(var r = 0; r < SIZE_BOARD; r++){\n        for(var c = 0; c < SIZE_BOARD; c++)if (board[r][c] === 0) {\n            message.messageLose.classList.add(\"hidden\");\n            message.messageWin.classList.add(\"hidden\");\n        }\n    }\n}\nfunction setGame() {\n    resetGame();\n    changeButton();\n    addRandomField(board);\n    addRandomField(board);\n    drawTile(board, cells);\n}\ndocument.addEventListener(\"keyup\", function(e) {\n    if (!allowedKeys.includes(e.key) || isWin) return;\n    var prevBoard = JSON.parse(JSON.stringify(board));\n    switch(e.key){\n        case \"ArrowLeft\":\n            slideLeft();\n            loseGameMessage();\n            winGameMessage();\n            break;\n        case \"ArrowRight\":\n            slideRight();\n            loseGameMessage();\n            winGameMessage();\n            break;\n        case \"ArrowUp\":\n            slideUp();\n            loseGameMessage();\n            winGameMessage();\n            break;\n        case \"ArrowDown\":\n            slideDown();\n            loseGameMessage();\n            winGameMessage();\n            break;\n        default:\n            break;\n    }\n    document.querySelector(\".game-score\").innerText = score;\n    var isSameBoard = isMoved(prevBoard);\n    if (isSameBoard) {\n        addRandomField(board);\n        drawTile(board, cells);\n    }\n});\nvar isMoved = function(prevBoard) {\n    for(var r = 0; r < SIZE_BOARD; r++)for(var c = 0; c < SIZE_BOARD; c++){\n        if (prevBoard[r][c] !== board[r][c]) return true;\n    }\n    return false;\n};\nfunction deleteZero(row) {\n    return row.filter(function(item) {\n        return item !== 0;\n    });\n}\nfunction slide(row) {\n    var rowClear = deleteZero(row);\n    var newRow = rowClear;\n    for(var i = 0; i < newRow.length - 1; i++)if (newRow[i] === newRow[i + 1]) {\n        newRow[i] *= 2;\n        newRow[i + 1] = 0;\n        score += newRow[i];\n    }\n    newRow = deleteZero(newRow);\n    while(newRow.length < 4)newRow.push(0);\n    return newRow;\n}\nfunction slideLeft() {\n    for(var i = 0; i < SIZE_BOARD; i++)board[i] = slide(board[i]);\n}\nfunction slideRight() {\n    for(var i = 0; i < SIZE_BOARD; i++){\n        board[i].reverse();\n        board[i] = slide(board[i]);\n        board[i].reverse();\n    }\n}\nfunction getItemsColumsBoard(matrix) {\n    var columsItems = [];\n    for(var r = 0; r < matrix.length; r++)for(var c = 0; c < matrix.length; c++)columsItems.push(matrix[c][r]);\n    return columsItems;\n}\nfunction getColumsBoard(arr, siceCut) {\n    var columsArr = [];\n    for(var i = 0; i < arr.length; i += siceCut){\n        var subarray = arr.slice(i, i + siceCut);\n        columsArr.push(subarray);\n    }\n    return columsArr;\n}\nfunction slideUp() {\n    var colums = getColumsBoard(getItemsColumsBoard(board), SIZE_BOARD);\n    for(var r = 0; r < SIZE_BOARD; r++)colums[r] = slide(colums[r]);\n    var rows = getColumsBoard(getItemsColumsBoard(colums), SIZE_BOARD);\n    for(var r1 = 0; r1 < SIZE_BOARD; r1++)board[r1] = rows[r1];\n}\nfunction slideDown() {\n    var colums = getColumsBoard(getItemsColumsBoard(board), SIZE_BOARD);\n    for(var r = 0; r < SIZE_BOARD; r++){\n        colums[r].reverse();\n        colums[r] = slide(colums[r]);\n        colums[r].reverse();\n    }\n    var rows = getColumsBoard(getItemsColumsBoard(colums), SIZE_BOARD);\n    for(var r1 = 0; r1 < SIZE_BOARD; r1++)board[r1] = rows[r1];\n}\nfunction changeButton() {\n    button.classList += \" restart\";\n    button.innerText = \"Restart\";\n    button.style = \"border: 2px solid red; color: #776e65; outline: none;\";\n    message[\"messageStart\"].classList.add(\"hidden\");\n}\nfunction addRandomField(matrix) {\n    // Находим все пустые ячейки в матрице\n    var emptyCells = [];\n    matrix.forEach(function(row, rowIndex) {\n        row.forEach(function(value, colIndex) {\n            if (value === 0) emptyCells.push({\n                rowIndex: rowIndex,\n                colIndex: colIndex\n            });\n        });\n    });\n    // Если есть пустые ячейки, выбираем случайную и добавляем 2 или 4\n    if (emptyCells.length > 0) {\n        var randomIndex = Math.floor(Math.random() * emptyCells.length);\n        var randomCell = emptyCells[randomIndex];\n        matrix[randomCell.rowIndex][randomCell.colIndex] = Math.random() < 0.9 ? 2 : 4;\n    }\n}\nfunction drawTile(tiles, element) {\n    tiles.forEach(function(row, rowInd) {\n        row.forEach(function(value, colInd) {\n            var cellIndex = rowInd * tiles.length + colInd;\n            var cell = element[cellIndex];\n            if (value > 0) {\n                cell.textContent = value;\n                cell.classList = \"field-cell\" + \" field-cell--\".concat(value);\n            } else {\n                cell.textContent = null;\n                cell.classList = \"field-cell\";\n            }\n        });\n    });\n}\nfunction winGameMessage() {\n    board.forEach(function(row) {\n        row.forEach(function(tile) {\n            if (tile >= 2048) {\n                isWin = true;\n                message.messageWin.classList.remove(\"hidden\");\n            }\n        });\n    });\n}\nfunction loseGameMessage() {\n    if (isBoardFull() && !canMakeMove()) message.messageLose.classList.remove(\"hidden\");\n}\nfunction isBoardFull() {\n    return board.every(function(row) {\n        return row.every(function(tile) {\n            return tile !== 0;\n        });\n    });\n}\nfunction canMakeMove() {\n    for(var r = 0; r < SIZE_BOARD; r++)for(var c = 0; c < SIZE_BOARD; c++){\n        var value = board[r][c];\n        if (value !== 0) {\n            if (r < 3 && value === board[r + 1][c]) return true;\n            if (c < 3 && value === board[r][c + 1]) return true;\n        }\n    }\n    return false;\n}\n\n//# sourceMappingURL=index.ca9d25d8.js.map\n","'use strict';\n\nconst SIZE_BOARD = 4;\nlet board = [...Array(SIZE_BOARD)].map(() => Array(SIZE_BOARD).fill(0));\nlet score = 0;\nlet isWin = false;\nconst cells = document.querySelectorAll('.field-cell');\nconst allowedKeys = ['ArrowLeft', 'ArrowRight', 'ArrowUp', 'ArrowDown'];\n\nconst message = {\n  messageStart: document.getElementById('message-start'),\n  messageLose: document.getElementById('message-lose'),\n  messageWin: document.getElementById('message-win'),\n};\n\nconst button = document.getElementById('start-button');\n\nbutton.addEventListener('click', setGame);\n\nfunction resetGame() {\n  score = 0;\n  document.querySelector('.game-score').innerText = score;\n  board = [...Array(SIZE_BOARD)].map(() => Array(SIZE_BOARD).fill(0));\n\n  for (let r = 0; r < SIZE_BOARD; r++) {\n    for (let c = 0; c < SIZE_BOARD; c++) {\n      if (board[r][c] === 0) {\n        message.messageLose.classList.add('hidden');\n        message.messageWin.classList.add('hidden');\n      }\n    }\n  }\n}\n\nfunction setGame() {\n  resetGame();\n  changeButton();\n  addRandomField(board);\n  addRandomField(board);\n  drawTile(board, cells);\n}\n\ndocument.addEventListener('keyup', (e) => {\n  if (!allowedKeys.includes(e.key) || isWin) {\n    return;\n  }\n\n  const prevBoard = JSON.parse(JSON.stringify(board));\n\n  switch (e.key) {\n    case 'ArrowLeft':\n      slideLeft();\n      loseGameMessage();\n      winGameMessage();\n      break;\n\n    case 'ArrowRight':\n      slideRight();\n      loseGameMessage();\n      winGameMessage();\n      break;\n\n    case 'ArrowUp':\n      slideUp();\n      loseGameMessage();\n      winGameMessage();\n      break;\n\n    case 'ArrowDown':\n      slideDown();\n      loseGameMessage();\n      winGameMessage();\n      break;\n\n    default:\n      break;\n  }\n\n  document.querySelector('.game-score').innerText = score;\n\n  const isSameBoard = isMoved(prevBoard);\n\n  if (isSameBoard) {\n    addRandomField(board);\n    drawTile(board, cells);\n  }\n});\n\nconst isMoved = (prevBoard) => {\n  for (let r = 0; r < SIZE_BOARD; r++) {\n    for (let c = 0; c < SIZE_BOARD; c++) {\n      if (prevBoard[r][c] !== board[r][c]) {\n        return true;\n      }\n    }\n  }\n\n  return false;\n};\n\nfunction deleteZero(row) {\n  return row.filter(item => item !== 0);\n}\n\nfunction slide(row) {\n  const rowClear = deleteZero(row);\n\n  let newRow = rowClear;\n\n  for (let i = 0; i < newRow.length - 1; i++) {\n    if (newRow[i] === newRow[i + 1]) {\n      newRow[i] *= 2;\n      newRow[i + 1] = 0;\n      score += newRow[i];\n    }\n  }\n\n  newRow = deleteZero(newRow);\n\n  while (newRow.length < 4) {\n    newRow.push(0);\n  }\n\n  return newRow;\n}\n\nfunction slideLeft() {\n  for (let i = 0; i < SIZE_BOARD; i++) {\n    board[i] = slide(board[i]);\n  }\n}\n\nfunction slideRight() {\n  for (let i = 0; i < SIZE_BOARD; i++) {\n    board[i].reverse();\n    board[i] = slide(board[i]);\n    board[i].reverse();\n  }\n}\n\nfunction getItemsColumsBoard(matrix) {\n  const columsItems = [];\n\n  for (let r = 0; r < matrix.length; r++) {\n    for (let c = 0; c < matrix.length; c++) {\n      columsItems.push(matrix[c][r]);\n    }\n  }\n\n  return columsItems;\n}\n\nfunction getColumsBoard(arr, siceCut) {\n  const columsArr = [];\n\n  for (let i = 0; i < arr.length; i += siceCut) {\n    const subarray = arr.slice(i, i + siceCut);\n\n    columsArr.push(subarray);\n  }\n\n  return columsArr;\n}\n\nfunction slideUp() {\n  const colums = getColumsBoard(getItemsColumsBoard(board), SIZE_BOARD);\n\n  for (let r = 0; r < SIZE_BOARD; r++) {\n    colums[r] = slide(colums[r]);\n  }\n\n  const rows = getColumsBoard(getItemsColumsBoard(colums), SIZE_BOARD);\n\n  for (let r = 0; r < SIZE_BOARD; r++) {\n    board[r] = rows[r];\n  }\n}\n\nfunction slideDown() {\n  const colums = getColumsBoard(getItemsColumsBoard(board), SIZE_BOARD);\n\n  for (let r = 0; r < SIZE_BOARD; r++) {\n    colums[r].reverse();\n    colums[r] = slide(colums[r]);\n    colums[r].reverse();\n  }\n\n  const rows = getColumsBoard(getItemsColumsBoard(colums), SIZE_BOARD);\n\n  for (let r = 0; r < SIZE_BOARD; r++) {\n    board[r] = rows[r];\n  }\n}\n\nfunction changeButton() {\n  button.classList += ' restart';\n  button.innerText = 'Restart';\n  button.style = 'border: 2px solid red; color: #776e65; outline: none;';\n  message['messageStart'].classList.add('hidden');\n}\n\nfunction addRandomField(matrix) {\n  // Находим все пустые ячейки в матрице\n  const emptyCells = [];\n\n  matrix.forEach((row, rowIndex) => {\n    row.forEach((value, colIndex) => {\n      if (value === 0) {\n        emptyCells.push({\n          rowIndex, colIndex,\n        });\n      }\n    });\n  });\n\n  // Если есть пустые ячейки, выбираем случайную и добавляем 2 или 4\n  if (emptyCells.length > 0) {\n    const randomIndex = Math.floor(Math.random() * emptyCells.length);\n    const randomCell = emptyCells[randomIndex];\n\n    matrix[randomCell.rowIndex][randomCell.colIndex]\n      = Math.random() < 0.9 ? 2 : 4;\n  }\n}\n\nfunction drawTile(tiles, element) {\n  tiles.forEach((row, rowInd) => {\n    row.forEach((value, colInd) => {\n      const cellIndex = rowInd * tiles.length + colInd;\n      const cell = element[cellIndex];\n\n      if (value > 0) {\n        cell.textContent = value;\n        cell.classList = 'field-cell' + ` field-cell--${value}`;\n      } else {\n        cell.textContent = null;\n        cell.classList = `field-cell`;\n      }\n    });\n  });\n}\n\nfunction winGameMessage() {\n  board.forEach(row => {\n    row.forEach(tile => {\n      if (tile >= 2048) {\n        isWin = true;\n        message.messageWin.classList.remove('hidden');\n      }\n    });\n  });\n}\n\nfunction loseGameMessage() {\n  if (isBoardFull() && !canMakeMove()) {\n    message.messageLose.classList.remove('hidden');\n  }\n}\n\nfunction isBoardFull() {\n  return board.every(row => row.every(tile => tile !== 0));\n}\n\nfunction canMakeMove() {\n  for (let r = 0; r < SIZE_BOARD; r++) {\n    for (let c = 0; c < SIZE_BOARD; c++) {\n      const value = board[r][c];\n\n      if (value !== 0) {\n        if (r < 3 && value === board[r + 1][c]) {\n          return true;\n        };\n\n        if (c < 3 && value === board[r][c + 1]) {\n          return true;\n        };\n      }\n    }\n  }\n\n  return false;\n}\n"],"names":["_array_like_to_array","arr","len","length","i","arr2","Array","_to_consumable_array","_array_without_holes","isArray","_iterable_to_array","iter","Symbol","iterator","from","_unsupported_iterable_to_array","o","minLen","n","Object","prototype","toString","call","slice","constructor","name","test","_non_iterable_spread","TypeError","board","map","fill","score","isWin","cells","document","querySelectorAll","allowedKeys","message","messageStart","getElementById","messageLose","messageWin","button","addEventListener","resetGame","querySelector","innerText","r","c","classList","add","style","addRandomField","drawTile","e","includes","key","prevBoard","JSON","parse","stringify","slideLeft","slide","loseGameMessage","winGameMessage","slideRight","reverse","slideUp","colums","getColumsBoard","getItemsColumsBoard","rows","r1","slideDown","isMoved","deleteZero","row","filter","item","newRow","push","matrix","columsItems","siceCut","columsArr","subarray","emptyCells","forEach","rowIndex","value","colIndex","randomIndex","Math","floor","random","randomCell","tiles","element","rowInd","colInd","cell","textContent","concat","tile","remove","every","canMakeMove"],"version":3,"file":"index.ca9d25d8.js.map"}